var expect = require('chai').expect;
const sinon = require('sinon');
// const assert = require('assert');
const { Forbidden } = require('../../utils/errors');
const { grabAuthenticationToken } = require('../../middleware/auth-handler');
var { mockRequest, mockResponse } = require('mock-req-res');
// var app = require('../../api');

let sandbox = sinon.createSandbox();

describe('Auth Handler Middleware: grabAuthenticationToken', function () {
  it('Should respond with Forbidden if no headers are definied', function (done) {
    const req = mockRequest({ headers: {} });
    const res = mockResponse();
    let error = new Forbidden();
    console.log(req);
    console.log(res);
    let response = grabAuthenticationToken(req, res, () => {});
    console.log(req);
    console.log(res);
    console.log(response);
    expect(res.status).to.equal(error.getCode());
    // assert.strictEqual(res.status, error.getCode());
    done();
    // });

    // it('called res.json with the right data', () => {
    //   expect(res.json).to.have.been.calledWith(match(expected))
    // })
  });
  it('Request should contain the provided token taken from authorization header', function (done) {
    let fakeToken = '76b1e728-1c14-43f9-aa06-6de5cbc064c2';
    let req = mockRequest({ headers: { Authorization: fakeToken } });
    let res = mockResponse();
    console.log(req);
    console.log(res);
    let error = grabAuthenticationToken(req, res, () => {});
    console.log(req);
    console.log(res);
    console.log(error);
    // grabAuthenticationToken(req, res, () => {
    expect(req.token).to.equal(fakeToken);
    done();
    // });
  });
});
